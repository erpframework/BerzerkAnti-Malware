using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using WebScanner.Models;

namespace WebScanner.Controllers
{
    public class Manager
    {
        public ApplicationDbContext ds;
        private BerzerkAPI.Controllers.SignatureController Signatures; 

        public Manager()
        {
            // Connection to DB 
            ds = new Models.ApplicationDbContext();

            // Disable settings we don't want 
            ds.Configuration.ProxyCreationEnabled = false;
            ds.Configuration.LazyLoadingEnabled = false;

            BerzerkAPI.Settings.Defaults();
            Signatures = new BerzerkAPI.Controllers.SignatureController(HttpContext.Current.Server.MapPath("~/App_Data/definitions.sdb"));
            Signatures.LoadDatabase(); 
        }

        public ScanItemBase ScanItemAdd(ScanItemAdd add)
        {
            // Scan the file data 
            var scan = BerzerkAPI.Analyzers.PatternAnalyzer.AnalyzeByteArray(add.Data, this.Signatures);

            // get the result 
            if (scan != null)
            {
                add.Result = scan.Definition;
            }
            else
            {
                add.Result = "Clean";
            }


            // Add the item to the db 
            var created = ds.ScanItem.Add(AutoMapper.Mapper.Map<ScanItem>(add));
            ds.SaveChanges();

            // return null or the results 
            return (created == null) ? null : AutoMapper.Mapper.Map<ScanItemBase>(created);
        }

        public ScanItemBase ScanItemGetOne(int id)
        {
            // find item 
            var s = ds.ScanItem.Find(id);

            // return item 
            return (s == null) ? null : AutoMapper.Mapper.Map<ScanItemBase>(s);
        }
    }
}