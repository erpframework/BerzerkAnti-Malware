using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//new 
using BerzerkAPI.Analyzers;
using BerzerkAPI.Controllers;
using BerzerkAPI.IO;
using BerzerkAPI.Models;

//More new...
using System.IO;
using System.Threading;

namespace TestScanner
{
    class Program
    {
        static void Main(string[] args)
        {
            // Output some information about the program running 
            Console.Title = "Berzerk Malware Scanner - Test Client - http://JordanHook.com";

            // Output version of tester 
            Console.WriteLine("Berzerk Malware Scanner Test Client 1.0"); 

            // Scan a folder based on the args 
            if(args.Length == 0)
            {
                Console.WriteLine("No scan directory specified...");
                return;
            }

            // Declare some variables for the scan 
            string ScanDirectory = args[0];

            // Our controllers... 
            SignatureController Signatures = new SignatureController("sigs.sdb");
            CachedController Cached = new CachedController("cached.cdb");

            // Load the library setting defaults (we will add a settings controller later...)
            BerzerkAPI.Settings.Defaults();

            //Set max file size to 5mb to testing purposes..
            BerzerkAPI.Settings.MaxFileSize = (1024 * 1024) * 5; 

            // Try to load the signatures 
            if(Signatures.LoadDatabase())
            {
                Console.WriteLine("Signature database was loaded with {0} entries", Signatures.Signatures.Count); 
            }
            else
            {
                // If the signatures can't be loaded... we can't scan for anything 
                Console.WriteLine("Unable to load signature database...");
                return; 
            }

            // Try to load the cached file database
            if(Cached.LoadDatabase())
            {
                Console.WriteLine("Cached database was loaded with {0} entries", Cached.CachedFiles.Count); 
            }
            else
            {
                // No cached database exists yet... 

                // Lets set a db version 1 for now... 
                Cached.SetDbVersion(1); 
            }

            // Output current task
            Console.WriteLine("\nGathering files to scan..."); 

            // Now that our controllers have been loaded... we can attempt to start scanning files 
            Queue<string> ScanList = GetAllFilesRecursively(ScanDirectory);

            // Output current task 
            Console.WriteLine("\nScanning {0} files...", ScanList.Count);

            // Loop through each file in the list 
            //foreach (string file in ScanList)
            //{
            //    try
            //    {
            //        // Run a scan on the file 
            //        Signature scan = BerzerkAPI.IO.File.ScanFile(file, Signatures, Cached);

            //        // Check if there is a threat detected 
            //        if (scan != null)
            //        {
            //            // Output the detection type and file location 
            //            Console.WriteLine("\nDETECTED {0}:\n{1}", scan.Definition, file);
            //        }
            //    }
            //    catch (Exception)
            //    {
            //        // We were unable to access the current file due to permission issues or it being in use... 
            //    }
            //}

            // Multi threaded scan  
            int runningScans = 0;

            // Run an extra thread to display some information about the scan...
            new Thread(() =>
            {
                while(ScanList.Count > 0)
                {
                    Thread.Sleep(5000);
                    Console.WriteLine("{0} Files left to scan...", ScanList.Count);
                    Console.WriteLine("{0} Scanning threads running...", runningScans);
                }
            }).Start();

            // While there are files left to scan... 
            while(true)
            {
                if (runningScans == 0 && ScanList.Count == 0)
                    break;

                // Ensure at least 4 scans running at all times... 
                while(runningScans < 4)
                {
                    // Don't start a new thread if the scan list is empty.. we just need to wait for the rest of the scans to finish... 
                    if (ScanList.Count == 0)
                        break;

                    // Create a new thead 
                    Thread t = new Thread(() =>
                     {
                         try
                         {
                             // Get the next file 
                             string current = ScanList.Dequeue();

                             // Scan the current file 
                             Signature scan = BerzerkAPI.IO.File.ScanFile(current, Signatures, Cached); 

                             // Check the results
                             if(scan != null)
                             {
                                 Console.WriteLine("\nDETECTED {0}:\n{1}", scan.Definition, current);
                             }
                         }
                         catch (Exception)
                         {
                             // We were unable to access the current file due to permission issues or it being in use... 
                         }

                         runningScans--; 
                     });

                    // Run the thread 
                    t.IsBackground = true;
                    t.Start();

                    // Increase the thread count... 
                    runningScans++; 
                }

                // Pause while we wait for a scan to finish... 
                Thread.Sleep(10); 
            }

            // All scans completed, give a delay before outputting finished results incase a detection is still being outputted..
            Thread.Sleep(1500); 

            // Now that the scan is done.. save the cache... 
            Cached.SaveDatabase();

            // EOP... 
            Console.WriteLine("\n\n\nScan complete, press any key to exit..."); 
            Console.ReadKey(); 
            
        }

        static Queue<string> GetAllFilesRecursively(string root)
        {
            // Create a list to build up a file table with 
            Queue<string> files = new Queue<string>();

            // Get each file in the root dir 
            foreach (string file in Directory.GetFiles(root))
            {
                // Add said files to the list 
                files.Enqueue(file); 
            }

            // Now with each directory in the root directory
            foreach(string dir in Directory.GetDirectories(root))
            {
                // Get it's files and child directories 
                Queue<string> children = GetAllFilesRecursively(dir);

                // Add the childrens files to our dir 
                while(children.Count > 0)
                {
                    // Copy qeueue over 
                    files.Enqueue(children.Dequeue());
                }
            }

            // Return list of all files in the root dir including child directories 
            return files; 
        }
    }
}
