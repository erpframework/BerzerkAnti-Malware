using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace BerzerkAPI.Analyzers
{
    /*
     * Name: MD5 Generator 
     * Date: 12/10/2016
     * Developer: Jordan Hook
     * Description: 
     *              This library will provide various md5 related functions for hashing data and files for record keeping purposes. 
     */ 
    public class MD5
    {
        private static System.Security.Cryptography.MD5 hasher = System.Security.Cryptography.MD5.Create();

        /// <summary>
        /// This function computes the md5 hash of a file based on it's bytes 
        /// </summary>
        /// <param name="filePath">The location of the file</param>
        ///// <returns>The md5 hash of the file.</returns>
        //public static string FromFile(ref FileStream fs)
        //{
        //    // Create a file stream on the filePath
        //    //FileStream fs = new FileStream(filePath, FileMode.Open);
        //    // Create an MD5 Hasher 
        //    var md5 = new MD5CryptoServiceProvider();

        //    // Generate the md5 hash of the file 
        //    byte[] fileData = md5.ComputeHash(fs);

        //    // Clsoe the stream 
        //    //fs.Dispose();

        //    // Convert the md5 array to a string 
        //    StringBuilder sb = new StringBuilder();
        //    for (int i = 0; i < fileData.Length; i++)
        //    {
        //        sb.Append(fileData[i].ToString("x2"));
        //    }

        //    // Return md5 as string 
        //    return sb.ToString();
        //}
        private static object locker = new object(); 
        public static byte[] quickMD5(string path)
        {
            // create a file stream 
            var fs = new BufferedStream(File.OpenRead(path), 1048576);

            // get the hash 
            byte[] hash = null;

            lock(locker) hash = hasher.ComputeHash(fs);

            // dispose of the stream 
            fs.Dispose();

            // return the hash 
            return hash;
        }
    }
}
