using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using BerzerkAPI.Models;
using BerzerkAPI.Controllers;

namespace BerzerkAPI.Analyzers
{
    /*
     * Name: PatternAnalyzer
     * Date: 01/10/2016
     * Developer: Jordan Hook 
     * Descroption:
     *              The pattern analzyer is a helper library that contains methods for pattern scanning byte arrays in various types of objects
     *              such as processes and files 
     */ 
    public class PatternAnalyzer
    {
        /// <summary>
        /// Analyze a byte[] and determine if it matches a malicious pattern from the signature database.
        /// </summary>
        /// <param name="data">the byte array to check</param>
        /// <param name="patterns">The patterns to scan for</param>
        /// <returns>Returns null if the file is clean or the signature if a detection is found</returns>
        public static Signature AnaylzeByteArray(byte[] data, SignatureController patterns)
        {
            //Get all the signatures we can search for based on the data size 
            var sigs = patterns.Signatures.Where(s => s.Pattern.Length < data.Length);

            //Check if there are any signatures found matching the requirements 
            if (sigs.Count() == 0)
                //if no return null
                return null;

            //create a temp variable to help with checks 
            int startIndex = 0; 

            //Loop through each index in the data array 
            for(int i = 0; i < data.Length; i++)
            {
                //check each signature 
                foreach(Signature s in sigs)
                {
                    //check for a match in the beggining of the pattern 
                    if(data[i] == s.Pattern[0])
                    {
                        //if a match is found we need to compare the rest of pattern looking for a match 
                        if((data.Length - i) - s.Pattern.Length >= 0)
                        {
                            //if there is enough of the data array left to search it.. 
                            for(startIndex = 1; startIndex < s.Pattern.Length; startIndex++)
                            {
                                //Check if the pattern still matches 
                                if (s.Pattern[startIndex] != data[i + startIndex])
                                    //if not, break the loop 
                                    break; 
                            }

                            //check if the pattern matched complete 
                            if(s.Pattern.Length == startIndex)
                            {
                                //return the signature that matches the byte array 
                                return s;
                            }
                        }
                    }
                }
            }

            //nothing was found, return null 
            return null; 
        }
    }
}
