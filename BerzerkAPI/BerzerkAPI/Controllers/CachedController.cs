using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using BerzerkAPI.Models;
using System.IO;

namespace BerzerkAPI.Controllers
{
    /*
     * Name: CachedController 
     * Date: 01/10/2016 
     * Developer: Jordan Hook
     * Description: 
     *              The Cached controller will be used to create a local database of safe files to help optimize scanning similar to how a web browser caches content. 
     *              Instead of having to read and scan the same file multiple times, unless there is a database update, it will save a copy of the scanned files 
     *              results in a database using a hex key to represent the scan results. 
     */
    public sealed class CachedController : DatabaseController
    {
        /// <summary>
        /// A list of CacheFile objects of all previously scanned files 
        /// </summary>
        //public List<CachedFile> CachedFiles { get; private set; }
        public Dictionary<string, CachedFile> CachedFiles { get; private set; }

        /// <summary>
        /// Creates an instance of a file cache controller 
        /// </summary>
        /// <param name="filePath">File path or location where you would like to save the cache database to</param>
        public CachedController(string filePath) : base(filePath)
        {
            //initialize cached controllers 
            //CachedFiles = new List<Models.CachedFile>(); 
            CachedFiles = new Dictionary<string, CachedFile>();
        }

        /// <summary>
        /// Loads the database of previously cached files 
        /// </summary>
        /// <returns>Returns true of the database was loaded without errors.</returns>
        public override bool LoadDatabase()
        {
            // check if the requested file exists 
            if (!File.Exists(this.Location))
            {
                //if it does not, through an exception as we cannot load the database file if it does not exist
                throw new Exception(string.Format("The cached file database file is missing at file location: {0}", this.Location));
            }
            else
            {
                // create a flag to return based on results of loading the file 
                bool loaded = true;

                // clear an existing cached files to avoid issues 
                this.CachedFiles.Clear();

                // open a new file stream on the database file 
                using (FileStream fs = File.Open(this.Location, FileMode.Open, FileAccess.Read, FileShare.None))
                {
                    // create a new binary reader to read cached file entries 
                    using (BinaryReader br = new BinaryReader(fs))
                    {
                        try
                        {
                            // try to get the cache size 
                            int cache_size = br.ReadInt32(); 

                            // loop through the cache and load it into memory 
                            for(int i = 0; i < cache_size; i++)
                            {
                                // Load the cachefile item from the db by reading it's properties 
                                CachedFile c = new CachedFile()
                                {
                                    Id = br.ReadString(),
                                    SignatureId = br.ReadInt32()
                                };

                                // add the file to memory list 
                                this.CachedFiles.Add(c.Id, c); 

                            }
                        }
                        // Catch the exception for debugging purposes 
                        catch (Exception ex)
                        {
#if DEBUG
                            Console.WriteLine(ex.Message);
#endif
                            // an error occured and database failed to load... reset the flag 
                            loaded = false; 
                        }
                    }
                }


                // return the results 
                return loaded;
            }
        }

        /// <summary>
        /// Saves the database to the file location. 
        /// </summary>
        /// <returns> Returns true of the database was saved without errors.</returns>
        public override bool SaveDatabase()
        {
            // create a flag to store the results of the file save 
            bool saved = true;

            try
            {
                // Create a new database file 
                using (FileStream fs = File.Create(this.Location))
                {
                    // Create a binary formmater to write the database with 
                    using (BinaryWriter bw = new BinaryWriter(fs))
                    {
                        // write the amount of items in the database 
                        bw.Write(this.CachedFiles.Count); 

                        // loop and write each cached file 
                        foreach(CachedFile cf in this.CachedFiles.Values)
                        {
                            //write the properties of a cached file 
                            bw.Write(cf.Id);
                            bw.Write(cf.SignatureId); 
                        }
                    }
                }
            }
            // catch the exception for debugging purposes 
            catch(Exception ex)
            {
#if DEBUG
                Console.WriteLine(ex.Message);
#endif

                // set the flag to a failed saved 
                saved = false; 
            }

            // return the results 
            return saved;
        }

        /// <summary>
        /// Grabs a cached file by the id (md5 hash)
        /// </summary>
        /// <param name="id">MD5 hashe of file</param>
        /// <returns>A CacheFile object or null if not found</returns>
        public CachedFile GetById(string id)
        {
            if (CachedFiles.ContainsKey(id))
                return CachedFiles[id];
            else
                return null; 

            //// try to find the file by it's md5 hash in the db 
            //var file = CachedFiles.FirstOrDefault(f => f.Id == id);

            //// return null or the file 
            //return (file == null) ? null : file; 
        }

        /// <summary>
        /// Adds a new cached file to the database
        /// </summary>
        /// <param name="cf">The cached file to add</param>
        public bool AddOne(CachedFile cf)
        {
            // check if the cached file already exists 
            if(GetById(cf.Id) == null)
            {
                // add the cached file 
                CachedFiles.Add(cf.Id, cf);

                // return true
                return true; 
            }
            else
            {
                // cached file already exists 
                return false; 
            }
        }
    }
}
