using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using BerzerkAPI.Controllers;
using BerzerkAPI.Models;

namespace BerzerkDatabaseManager
{
    public partial class frmMain : Form
    {
        public SignatureController Signatures; 

        public frmMain()
        {
            InitializeComponent();
        }

        private void gitHubToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://github.com/HookJordan/BerzerkAnti-Malware");
        }

        private void jordanHookcomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("http://jordanhook.com");
        }

        private void frmMain_Load(object sender, EventArgs e)
        {

        }

        private void importToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // create a new open file dialog 
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                // set filter for the open file dialog 
                ofd.Filter = "(*.sdb)|*.sdb"; ; 

                // Check if a file is selected 
                if(ofd.ShowDialog() == DialogResult.OK)
                {
                    // intialize the sig controller on the file selected 
                    Signatures = new SignatureController(ofd.FileName);

                    // try to load the file 
                    if(Signatures.LoadDatabase())
                    {
                        // clean up currently loaded db if any
                        CleanUp();

                        // load new db into view 
                        loadIntoView();
                    }
                    else
                    {
                        // alert user the file could not be loaded... 
                        MessageBox.Show("Unable to load signature database, a new database will be created if you save.");
                    }
                }
            }
        }

        // Call this method before an import 
        private void CleanUp()
        {
            // Clear all items in the listview
            lstSignatures.Items.Clear();

            // set the labels
            this.lblSigCount.Text = Signatures.Signatures.Count.ToString();
            this.lblDBVersion.Text = Signatures.DbVersion.ToString();

            // update window title
            this.Text = "Berzerk Database Manager 0.1 - " + Signatures.Location; 
        }

        private void updateStats()
        {
            // update the stats at the bottom 
            lblSigCount.Text = Signatures.Signatures.Count.ToString(); 
        }

        public void loadIntoView()
        {
            // loop through all signatures 
            foreach(Signature s in Signatures.Signatures)
            {
                // add each to the listview 
                this.lstSignatures.Items.Add(new ListViewItem(new string[] { s.Id.ToString(), s.Definition, s.GetPatternHex(), s.Description, s.DateFound }));
            }
        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // create a new save file dialog to save the new sig db to 
            using (SaveFileDialog sfd = new SaveFileDialog())
            {
                // set the filter 
                sfd.Filter = "(*.sdb)|*.sdb";

                // If a file location was selected 
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    // create new signatures db 
                    Signatures = new SignatureController(sfd.FileName);

                    // set default db version
                    Signatures.SetDbVersion(0.1); 

                    // clean up currently loaded db if any 
                    CleanUp();
                }
            }
        }

        private void exportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // check if a db is open 
            if(Signatures == null)
            {
                // if not output and error 
                MessageBox.Show("No database is set, please create a new one..."); 
            }
            else
            {
                // other wise try to save 
                if(Signatures.SaveDatabase())
                {
                    // notify database was saved correctly 
                    MessageBox.Show(string.Format("Database was saved to: \n{0}", Signatures.Location));
                }
                else
                {
                    // notify database would not be saved... 
                    MessageBox.Show("Unable to save the database..."); 
                }
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // just exit the program... 
            Environment.Exit(0); 
        }

        private void mnuSigs_Opening(object sender, CancelEventArgs e)
        {
            // Based on the amount of signatures in the db... enable / disable certain features... 
            if(Signatures.Signatures.Count == 0)
            {
                editToolStripMenuItem.Enabled = false;
                removeToolStripMenuItem.Enabled = false; 
            }
            else
            {
                editToolStripMenuItem.Enabled = true;
                removeToolStripMenuItem.Enabled = true; 
            }
        }

        private void newToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            // create a new signature form 
            using (frmSignature sig = new frmSignature())
            {
                // set the id of the signature 
                sig.numId.Value = Signatures.NextId();

                // if the signature dialog was closed okay 
                if(sig.ShowDialog() == DialogResult.OK)
                {
                    // add the new signature 
                    var s = new Signature()
                    {
                        Id = Convert.ToInt32(sig.numId.Value),
                        Definition = sig.txtDefinition.Text,
                        Description = sig.txtDescription.Text,
                        DateFound = sig.txtDate.Text
                    };

                    // update the sig pattern
                    s.SetPatternBytes(sig.txtPattern.Text);

                    // add the signature to the controller 
                    Signatures.AddOne(s);

                    // update listview item 
                    this.lstSignatures.Items.Add(new ListViewItem(new string[] { s.Id.ToString(), s.Definition, s.GetPatternHex(), s.Description, s.DateFound }));
                }
            }
        }

        private void editToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // If items are selected 
            if(lstSignatures.SelectedItems.Count > 0)
            {
                // Loop throug all selected items 
                for(int i = 0; i < lstSignatures.SelectedItems.Count; i++)
                {
                    // create a new form sig for each... 
                    using (frmSignature sig = new frmSignature())
                    {
                        // get the signature for the item 
                        var s = Signatures.GetById(Convert.ToInt32(lstSignatures.SelectedItems[i].SubItems[0].Text));

                        // update the form information 
                        sig.numId.Value = s.Id;
                        sig.txtDate.Text = s.DateFound;
                        sig.txtDefinition.Text = s.Definition;
                        sig.txtDescription.Text = s.Description;
                        sig.txtPattern.Text = s.GetPatternHex();

                        // if the dialog is closed and okay... we need to update the signature... 
                        if(sig.ShowDialog() == DialogResult.OK)
                        {
                            // update all fields 
                            s.SetPatternBytes(sig.txtPattern.Text);
                            s.Description = sig.txtDescription.Text;
                            s.Definition = sig.txtDefinition.Text;

                            // try to update the signature 
                            if(Signatures.UpdateOne(s.Id, s))
                            {
                                //update list view 
                                lstSignatures.SelectedItems[i].SubItems[1].Text = s.Definition;
                                lstSignatures.SelectedItems[i].SubItems[2].Text = s.GetPatternHex();
                                lstSignatures.SelectedItems[i].SubItems[3].Text = s.Description;
                            }
                            else
                            {
                                MessageBox.Show("Unable to update the signature..."); 
                            }
                        }
                    }
                }
            }
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // confirm this is what the user really wants to do... 
            if(MessageBox.Show("Are you sure you want to delete all selected signatures? There is no way to recover them!", "Warning", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                // loop through all the selected signatures 
                for(int i = 0; i < lstSignatures.SelectedItems.Count; i++)
                {
                    // Remove from DB 
                    this.Signatures.RemoveSignature(Convert.ToInt32(lstSignatures.SelectedItems[i].SubItems[0].Text));

                    // Remove from list 
                    lstSignatures.Items.Remove(lstSignatures.SelectedItems[i]);
                }
            }
        }
    }
}
