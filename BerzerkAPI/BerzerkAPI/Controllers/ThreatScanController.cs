//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading;
//using System.Threading.Tasks;

//namespace BerzerkAPI.Controllers
//{
//    public class ThreatScanController
//    {
//        public Queue<string> TargetFiles { get; set; }
//        public Queue<System.Diagnostics.Process> TargetProcess { get; set; }
//        public SignatureController Signatures { get; set; }
//        public bool Enabled { get; private set; }
//        private bool Pause { get; set; }
//        public bool Cancel { get; private set; }
//        public bool Scanning { get { return TargetFiles.Count > 0 || TargetProcess.Count > 0; } }

//        public int MaxThreads { get { if (Settings.ReducePriority) return Environment.ProcessorCount / 2; else return Environment.ProcessorCount; }  }

//        public ThreatScanController(Queue<string> files, Queue<System.Diagnostics.Process> process)
//        {
//            this.TargetFiles = files;
//            this.TargetProcess = process;
//        }

//        public void Run()
//        {
//            Task t = new Task(() =>
//            {
//                while (!Cancel)
//                {
//                    while(Pause && !Cancel)
//                    {
//                        Thread.Sleep(500);
//                    }

//                    // check if scan should be completed... 
//                    if(TargetFiles.Count() == 0 && TargetProcess.Count() == 0)
//                    {
//                        ThreatScanComplete?.Invoke(this); 

//                        break;
//                    }

//                    if(TargetFiles.Count() != 0)
//                    {
//                        // get the next file to scan... 
//                        string target = TargetFiles.Dequeue(); 
//                    }
//                    else if(TargetProcess.Count != 0)
//                    {

//                    }
//                }

//            });

//            t.Start(); 
//        }

//        /// <summary>
//        /// Triggered when a new threat is detected
//        /// </summary>
//        /// <param name="sender">Source scan controller</param>
//        /// <param name="args">Information about the threat being detected</param>
//        public delegate void ThreatDetectedHandler(ThreatScanController sender, ThreatDetectedArgs args);

//        /// <summary>
//        /// Event triggered when a threat is detected during the scan process. 
//        /// </summary>
//        public event ThreatDetectedHandler ThreatDetected;

//        /// <summary>
//        /// Triggers when the scan has completed. 
//        /// </summary>
//        /// <param name="sender">The scanner that was running.</param>
//        public delegate void ThreatScanCompleteHandler(ThreatScanController sender);
//        /// <summary>
//        /// Triggers when the threat scan has completed 
//        /// </summary>
//        public event ThreatScanCompleteHandler ThreatScanComplete;
//    }
//}
