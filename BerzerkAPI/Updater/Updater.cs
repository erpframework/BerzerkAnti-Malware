using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Net;

namespace Updater
{
    public class UpdateClient
    {
        // Store the location of the update info file here 
        public string UpdateInfoUrl { get; private set; }

        /// <summary>
        /// A webclient to download updates and update info 
        /// </summary>
        private WebClient Client { get; set; }

        /// <summary>
        /// Creates a new instance of the updater class 
        /// </summary>
        /// <param name="updateInfoUrl">The url to check for updates at</param>
        public UpdateClient(string updateInfoUrl)
        {
            // Pass the parameters 
            this.UpdateInfoUrl = updateInfoUrl;

            // Initialize the web client 
            Client = new WebClient();

            // Set proxy = null to stop sniffers 
            Client.Proxy = null;

            // Disable cache to stop the same responses 
            Client.CachePolicy = new System.Net.Cache.RequestCachePolicy(System.Net.Cache.RequestCacheLevel.NoCacheNoStore);

            // Setup events
            Client.DownloadStringCompleted += Client_DownloadStringCompleted;
        }

        public void CheckForUpdates()
        {
            try
            {
                // If the client isn't busy from another check or update 
                if (!Client.IsBusy)
                {
                    // Try to download update information 
                    Client.DownloadStringAsync(new Uri(UpdateInfoUrl));
                }
            }catch (Exception) { }
        }

        public void DownloadUpdate(UpdateInfoArgs info, string dstPath)
        {
            try
            {
                // Create tmp file name
                string file = dstPath + ".tmp";

                // Download the file to the tmp path 
                Client.DownloadFile(info.UpdateItem, file);

                if (File.Exists(dstPath))
                {
                    // Delete current 
                    File.Delete(dstPath);
                }

                // Now that the file has downloaded we need to move it ot the dst path 
                File.Move(file, dstPath);

                // Delete temp file
                File.Delete(file);

                // Invoke the update event
                UpdateComplete?.Invoke(this, info, dstPath);
            }
            catch(Exception ex)
            {
                throw new Exception("An error has occured while attempting to update. Please try again."); 
            }
        }

        public void forceDownload(string dst)
        {
            try
            {
                // Create a new client to download with... 
                WebClient c = new WebClient();
                c.Proxy = null;
                c.CachePolicy = new System.Net.Cache.RequestCachePolicy(System.Net.Cache.RequestCacheLevel.NoCacheNoStore);

                // Get the info for this updater 
                string info = c.DownloadString(this.UpdateInfoUrl);

                // Try to get the headers 
                string[] headers = info.Split('\n');

                // Create new instance of update info 
                UpdateInfoArgs args = new UpdateInfoArgs();
                args.Version = double.Parse(headers[0]);
                args.Type = headers[1].Replace("\r", "");

                // Get the update item (either database or zip file) 
                args.UpdateItem = headers[2];

                // Nowe we have the update information... lets download the file 
                if (File.Exists(dst))
                    File.Delete(dst);

                // download the file 
                c.DownloadFile(args.UpdateItem, dst);

                // done with web client.. 
                c.Dispose();

                // Any errors here will cause program to crash... reisntallation is required at this point.. 
            }
            catch (Exception)
            {

            }
        }

        private void Client_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
        {
            try
            {
                // Try to get the headers 
                string[] headers = e.Result.Split('\n');

                // Create new instance of update info 
                UpdateInfoArgs args = new UpdateInfoArgs();
                args.Version = double.Parse(headers[0]);
                args.Type = headers[1].Replace("\r", "");

                // Get the update item (either database or zip file) 
                args.UpdateItem = headers[2];

                // Invoke the update found event
                UpdateFound?.Invoke(this, args); 
            }
            catch (Exception ex)
            {
                //throw new Exception("Unable to download update information. Server is either down or your computer does not have internet access."); 
            }
        }

        public delegate void UpdateFoundHandler(UpdateClient sender, UpdateInfoArgs args);
        public event UpdateFoundHandler UpdateFound;

        public delegate void UpdateCompleteHandler(UpdateClient sender, UpdateInfoArgs args, string dst);
        public event UpdateCompleteHandler UpdateComplete; 
    }

    public class UpdateInfoArgs
    {
        public double Version { get; set; }
        public string Type { get; set; }
        public string UpdateItem { get; set; }
    }

}
