using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;


namespace extractor
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            try
            {
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);

                try
                {
                    System.Diagnostics.Process.GetProcessesByName("MainGUI.exe")[0].Kill();
                }
                catch { }

                string zipFile = Application.StartupPath + "\\update.zip";
                string temp = Application.StartupPath + "\\updates\\";

                // check for update file... 
                if (!File.Exists(zipFile))
                    return;

                // check for update temp file directory 
                if (!Directory.Exists(temp))
                    Directory.CreateDirectory(temp);

                // okay everything should be setup... 
                System.IO.Compression.ZipFile.ExtractToDirectory(zipFile, temp);

                copyUpdate(temp, Application.StartupPath);

                Directory.Delete(temp, true);

                System.Diagnostics.Process.Start("MainGUI.exe");
            }
            catch (Exception ex)
            {
                File.WriteAllText("error.txt", ex.Message); 
            }
        }

        static void copyUpdate(string src, string dst)
        {
            DirectoryInfo dir = new DirectoryInfo(src);

            DirectoryInfo[] children = dir.GetDirectories(); 

            if(!Directory.Exists(dst))
            {
                Directory.CreateDirectory(dst); 
            }

            FileInfo[] files = dir.GetFiles(); 

            foreach(FileInfo file in files)
            {
                string dest = Path.Combine(dst, file.Name);

                if (dest != Application.ExecutablePath)
                {
                    file.CopyTo(dest, true); 
                }
            }

            foreach(DirectoryInfo child in children)
            {
                copyUpdate(child.FullName, Path.Combine(dst, child.Name)); 
            }
        }
    }
}
