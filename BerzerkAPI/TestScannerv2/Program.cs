using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//new 
using BerzerkAPI.Analyzers;
using BerzerkAPI.Controllers;
using BerzerkAPI.IO;
using BerzerkAPI.Models;

//More new...
using System.IO;
using System.Threading;
namespace TestScannerv2
{
    class Program
    {
        static void Main(string[] args)
        {
            // Output some information about the program running 
            Console.Title = "Berzerk Malware Scanner 2 - Test Client - http://JordanHook.com";

            // Output version of tester 
            Console.WriteLine("Berzerk Malware Scanner Test Client 2.0");

            // Scan a folder based on the args 
            if (args.Length == 0)
            {
                Console.WriteLine("No scan directory specified...");
                return;
            }

            // Declare some variables for the scan 
            string ScanDirectory = args[0];

            // Our controllers... 
            SignatureController Signatures = new SignatureController("sigs.sdb");
            CachedController Cached = new CachedController("cached.cdb");

            // Load the library setting defaults (we will add a settings controller later...)
            BerzerkAPI.Settings.Defaults();

            //Set max file size to 5mb to testing purposes..
            BerzerkAPI.Settings.MaxFileSize = (1024 * 1024) * 5;

            // Try to load the signatures 
            if (Signatures.LoadDatabase())
            {
                Console.WriteLine("Signature database was loaded with {0} entries", Signatures.Signatures.Count);
            }
            else
            {
                // If the signatures can't be loaded... we can't scan for anything 
                Console.WriteLine("Unable to load signature database...");
                return;
            }

            // Try to load the cached file database
            if (Cached.LoadDatabase())
            {
                Console.WriteLine("Cached database was loaded with {0} entries", Cached.CachedFiles.Count);
            }
            else
            {
                // No cached database exists yet... 

                // Lets set a db version 1 for now... 
                Cached.SetDbVersion(1);
            }

            // Output current task
            Console.WriteLine("\nGathering files to scan...");

            // Now that our controllers have been loaded... we can attempt to start scanning files 
            Queue<string> ScanList = BerzerkAPI.IO.File.CreateFileQueue(ScanDirectory, true);

            // Output current task 
            Console.WriteLine("\nScanning {0} files...", ScanList.Count);

            // Create an instance of the scan controller to work with 
            ScanController scanner = new ScanController(ScanList, Signatures, Cached);

            // Setup events
            scanner.ThreatDetected += Scanner_ThreatDetected;
            scanner.ThreatScanComplete += Scanner_ThreatScanComplete;

            // Start the scan 
            scanner.Run();

            // Keep the program open 
            System.Diagnostics.Process.GetCurrentProcess().WaitForExit(); 
        }

        private static void Scanner_ThreatScanComplete(ScanController sender)
        {
            // Notify user 
            Console.WriteLine("\n\n\nScan complete..."); 
        }

        private static void Scanner_ThreatDetected(ScanController sender, ThreatDetectedArgs args)
        {
            // Notify user 
            Console.WriteLine("\nTHREAT DETECT: {0}\n{1}", args.Detection.Definition, args.FilePath);
        }
    }
}
