using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using BerzerkAPI.Models;

namespace BerzerkAPI.Controllers
{
    /*
     * Name: Signature Database Controller 
     * Date: 01/10/2016
     * Developer: Jordan Hook
     * Description: 
     *              A database controller for malicious file signatures (hex patterns). The controller supports various use case such as 
     *              get one, add one and remove one. More maybe added in the furture depending on requirements. 
     */ 
    public class SignatureController : DatabaseController
    {
        /// <summary>
        /// Read only list of signatures 
        /// </summary>
        public List<Signature> Signatures { get; private set; }

        /// <summary>
        /// Determines if changes were made to db and if so, update the db 
        /// </summary>
        private bool DBVersionUpdate { get; set; }

        public SignatureController(string fileLocation) : base(fileLocation)
        {
            // Intialize the signature list 
            this.Signatures = new List<Models.Signature>();
        }

        public override bool LoadDatabase()
        {
            // Check if the database file exists 
            if(!File.Exists(this.Location))
            {
                // If it does not, through an exception as the we cannot load a database then. 
                throw new Exception(string.Format("The signature database file is missing from location: {0}", this.Location));
            }
            else
            {
                // Flag variable to determine if the database was loaded correctly... 
                bool loaded = true;

                // clear the existing database 
                this.Signatures.Clear(); 

                // Create a new file stream to load with 
                using (FileStream fs = File.Open(this.Location, FileMode.Open, FileAccess.Read, FileShare.None))
                {
                    // create a new binary reader to read the database with 
                    using (BinaryReader br = new BinaryReader(fs))
                    {
                        try
                        {
                            // read the database version 
                            this.DbVersion = br.ReadDouble();

                            // determine how many signatures there are to read.. 
                            int sig_count = br.ReadInt32();

                            // loop through the db and load each signature into memory 
                            for (int i = 0; i < sig_count; i++)
                            {
                                // Create a new instance of the signature object from the database file 
                                Signature s = new Signature()
                                {
                                    Id = br.ReadInt32(),
                                    Definition = br.ReadString(),
                                    Pattern = br.ReadBytes(br.ReadInt32()),
                                    Description = br.ReadString(),
                                    DateFound = br.ReadString()
                                };

                                // add the signature to the database 
                                this.Signatures.Add(s);
                            }
                        }
                        catch (Exception ex)
                        {
#if DEBUG
                            Console.WriteLine(ex.Message);
#endif
                            // an error occured loading the database... we can  catch it for debugging purposes but we don't want to expose the error to anyone else 
                            loaded = false; 
                        }
                    }
                }

                // Return the results 
                return loaded;
            }
        }

        public override bool SaveDatabase()
        {
            // a flag variable to determine the success 
            bool saved = true;

            try
            {
                // create new database file 
                using (FileStream fs = File.Create(this.Location))
                {
                    // create a new binary writer to write the database with 
                    using (BinaryWriter bw = new BinaryWriter(fs))
                    {
                        // write the database version
                        bw.Write(this.DbVersion);

                        // write the signature count 
                        bw.Write(this.Signatures.Count); 

                        // loop and write each signature 
                        foreach(Signature s in this.Signatures)
                        {
                            // Write each part of the signature seperately... 
                            bw.Write(s.Id);
                            bw.Write(s.Definition);
                            bw.Write(s.Pattern.Length);
                            bw.Write(s.Pattern);
                            bw.Write(s.Description);
                            bw.Write(s.DateFound);
                        }
                    }
                }
            }
            catch(Exception ex)
            {
#if DEBUG
                Console.WriteLine(ex.Message);
#endif
                // catch the exception for debugging purposes but do not expose... 
                saved = false; 
            }
            // return the results 
            return saved; 
        }

        public Signature GetById(int id)
        {
            // try to find the signature by the id 
            return Signatures.FirstOrDefault(s => s.Id == id);
        }

        /// <summary>
        /// Add new signature to the database 
        /// </summary>
        /// <param name="newSig">The signature item to add</param>
        /// <returns>Success of the add</returns>
        public bool AddOne(Signature newSig)
        {
            // If an existing signature already exists with the same id 
            if(GetById(newSig.Id) != null)
            {
                // return false 
                return false; 
            }
            else
            {
                // else add the signature 
                this.Signatures.Add(newSig);

                databaseUpdate();

                // return success 
                return true;  
            }
        }

        /// <summary>
        /// Call this function to update a signature by it's id 
        /// </summary>
        /// <returns>Result of the update</returns>
        public bool UpdateOne(int id, Signature sig)
        {
            // loop through all signatures 
            for (int i = 0; i < Signatures.Count; i++)
            {
                // find the signature we are trying to update 
                if (Signatures[i].Id == id)
                {
                    // set the signature when found 
                    Signatures[i] = sig;

                    databaseUpdate(); 

                    // return true 
                    return true;
                }
            }

            // if not found, return false 
            return false;
        }

        public void RemoveSignature(int id)
        {
            // try to find the sig by it's id 
            var sig = GetById(id); 

            // check if it exists 
            if(sig != null)
            {
                databaseUpdate();

                // if it does 
                Signatures.Remove(sig);
            }
        }

        // return the next id for a signature 
        public int NextId()
        {
            // If no signatures exist, return 1, the default first id 
            if (Signatures.Count == 0)
                return 1;
            else 
                // if signatures do exist, get the last signature in the database and increase the count by one... 
                return (this.Signatures[this.Signatures.Count - 1].Id) + 1; 
        }
        private void databaseUpdate()
        {
            // If a change was made... update db and increase version
            if (!DBVersionUpdate)
            {
                // Set update increase = true 
                DBVersionUpdate = true;

                // increase the db version 
                SetDbVersion(DbVersion + 0.01);
            }
        }
    }
}
