using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//new 
using BerzerkAPI.Analyzers;
using BerzerkAPI.Controllers;
using BerzerkAPI.IO;
using BerzerkAPI.Models;

//More new...
using System.IO;

namespace TestScanner
{
    class Program
    {
        static void Main(string[] args)
        {
            // Output some information about the program running 
            Console.Title = "Berzerk Malware Scanner - Test Client - http://JordanHook.com";

            // Output version of tester 
            Console.WriteLine("Berzerk Malware Scanner Test Client 1.0"); 

            // Scan a folder based on the args 
            if(args.Length == 0)
            {
                Console.WriteLine("No scan directory specified...");
                return;
            }

            // Declare some variables for the scan 
            string ScanDirectory = args[0];

            // Our controllers... 
            SignatureController Signatures = new SignatureController("sigs.sdb");
            CachedController Cached = new CachedController("cached.cdb");

            // Try to load the signatures 
            if(Signatures.LoadDatabase())
            {
                Console.WriteLine("Signature database was loaded with {0} entries", Signatures.Signatures.Count); 
            }
            else
            {
                // If the signatures can't be loaded... we can't scan for anything 
                Console.WriteLine("Unable to load signature database...");
                return; 
            }

            // Try to load the cached file database
            if(Cached.LoadDatabase())
            {
                Console.WriteLine("Cached database was loaded with {0} entries", Cached.CachedFiles.Count); 
            }
            else
            {
                // No cached database exists yet... 

                // Lets set a db version 1 for now... 
                Cached.SetDbVersion(1); 
            }

            // Output current task
            Console.WriteLine("\nGathering files to scan..."); 

            // Now that our controllers have been loaded... we can attempt to start scanning files 
            List<string> ScanList = GetAllFilesRecursively(ScanDirectory);

            // Output current task 
            Console.WriteLine("\nScanning {0} files...", ScanList.Count);

            // Loop through each file in the list 
            foreach(string file in ScanList)
            {
                // Run a scan on the file 
                Signature scan = BerzerkAPI.IO.File.ScanFile(file, Signatures, Cached); 

                // Check if there is a threat detected 
                if(scan != null)
                {
                    // Output the detection type and file location 
                    Console.WriteLine("\nDETECTED {0}:\n{1}", scan.Definition, file); 
                }
            }

            // Now that the scan is done.. save the cache... 
            Cached.SaveDatabase();

            // EOP... 
            Console.WriteLine("\n\n\nScan complete, press any key to exit..."); 
            Console.ReadKey(); 
            
        }

        static List<string> GetAllFilesRecursively(string root)
        {
            // Create a list to build up a file table with 
            List<string> files = new List<string>();

            // Get each file in the root dir 
            foreach (string file in Directory.GetFiles(root))
            {
                // Add said files to the list 
                files.Add(file); 
            }

            // Now with each directory in the root directory
            foreach(string dir in Directory.GetDirectories(root))
            {
                // Get it's files and child directories 
                List<string> children = GetAllFilesRecursively(dir);

                // Add the childrens files to our dir 
                files.AddRange(children);
            }

            // Return list of all files in the root dir including child directories 
            return files; 
        }
    }
}
