using BerzerkAPI.IO;
using BerzerkAPI.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace BerzerkAPI.Controllers
{
    public class ScanController
    {
        /// <summary>
        /// A queue of file paths that the scan controller is attempting to scan 
        /// </summary>
        public Queue<string> TargetFiles { get; set; }

        /// <summary>
        /// Signature controller with current signature database 
        /// </summary>
        public SignatureController Signatures { get; private set; }
        
        /// <summary>
        /// Cache Controller with current cache set 
        /// </summary>
        public CachedController Cache { get; private set; }

        /// <summary>
        /// The maximum number of threads the scanner is allowed to use
        /// </summary>
        public int MaxThreads { get; set; }

        /// <summary>
        /// Determines if the scans should pause
        /// </summary>
        public bool Pause { get; set; }

        /// <summary>
        /// Used to cancel and abort currently running threads 
        /// </summary>
        private bool Cancel { get; set; }

        /// <summary>
        /// Returns true if a scan is currently in progress. 
        /// </summary>
        public bool Scanning { get { return TargetFiles.Count > 0 || RunningThreads > 0; } }

        /// <summary>
        /// Returns the amount of scan threads currently running 
        /// </summary>
        public int RunningThreads { get { return ScannerThreads.Count; } }

        public decimal ScannedData { get; set; }

        /// <summary>
        /// List of threads running 
        /// </summary>
        private List<Thread> ScannerThreads { get; set;  }

        /// <summary>
        /// Creates an instance of a new scan controller
        /// </summary>
        /// <param name="targetFiles">The files you want to scan</param>
        /// <param name="signatures">The signature controller to scan with</param>
        /// <param name="cache">The cache controller to log results with</param>
        public ScanController(Queue<string> targetFiles, SignatureController signatures, CachedController cache)
        {
            // Pass the parameters 
            this.TargetFiles = targetFiles;
            this.Signatures = signatures;
            this.Cache = cache;

            // Initiaize private properties 
            this.ScannerThreads = new List<Thread>();

            // Set some defaults
            this.MaxThreads = Environment.ProcessorCount;
            this.Pause = false;
            this.Cancel = false; 
        }

        public void Run()
        {
            // Create master thread to manage running threads 
            Thread t = new Thread(() =>
            {
                // Create local copies of databases to work with 
                SignatureController localSignatures = this.Signatures;
                CachedController localCache = this.Cache;

                //MaxThreads = 1;

                // While we are not canceling the whole scan... 
                while (!Cancel)
                {

                    // If all scans have finished and there is nothing left to scan... 
                    if (RunningThreads == 0 && TargetFiles.Count() == 0)
                    {
                        // Attempt to raise event for scan complete 
                        // Raise the event 
                        ThreatScanComplete?.Invoke(this);

                        // And then exit the loop 
                        break; 
                    }
                    else
                    {
                        // Check for existing dead threads in the thread list 
                        var dead = ScannerThreads.FirstOrDefault(th => th.ThreadState == ThreadState.Stopped); 

                        // while there are dead threads to remove... 
                        while(dead != null)
                        {
                            // Remove dead thread 
                            ScannerThreads.Remove(dead);

                            // Check for more 
                            dead = ScannerThreads.FirstOrDefault(th => th.ThreadState == ThreadState.Stopped);
                        }

                        // Clean garbage left behind by scans... 
                        GC.Collect();

                        // Now that we have freed space in the thread list, we need to create new threads 
                        // Loop while there is room left for more threads 
                        // And while there are files left to scan 
                        while (RunningThreads < MaxThreads && TargetFiles.Count() > 0)
                        {
                            // Create new scan thrad for the next file 
                            Thread scan = new Thread(() =>
                            {
                                try
                                {
                                    // Get the next file path 
                                    string target = TargetFiles.Dequeue();

                                    // Scan the file and get results 
                                    //Signature result = BerzerkAPI.IO.File.ScanFile(target, ref localSignatures, ref localCache);
                                    ScanResultArgs result = BerzerkAPI.IO.File.ScanFile(target, ref localSignatures, ref localCache);

                                    // accumulate the total scanned data in MB
                                    ScannedData += (result.Size / 1024) / 1024;

                                    // Check results
                                    if(result.Detection != null)
                                    {
                                        // Attempt to raise detection event 

                                        // Create event args 
                                        ThreatDetectedArgs args = new ThreatDetectedArgs() { Detection = result.Detection, FilePath = target };

                                        // Raise event ? 
                                        ThreatDetected?.Invoke(this, args);
                                    }

                                    // Sleep thread before ending it to provide some timeout for the cpu 
                                    Thread.Sleep(20); 
                                }
                                catch (Exception ex) // debugging purposes 
                                {
                                    // something went wrong... 
#if DEBUG
                                    Console.WriteLine(ex.Message);
#endif
                                }
                            });

                            // Add thread to list 
                            ScannerThreads.Add(scan);

                            // Run thread in bg 
                            scan.IsBackground = true;

                            // Run the scan
                            scan.Start(); 
                        }
                    }
                }

                // Now that all loops have exited, it's time to save all cache and update the cache controller 
                this.Cache = localCache;

                // Call the save function 
                this.Cache.SaveDatabase(); 
            });

            // Set the thread to run in the bg and run it 
            t.IsBackground = true;
            t.Start();
        }

        /// <summary>
        /// Triggered when a new threat is detected
        /// </summary>
        /// <param name="sender">Source scan controller</param>
        /// <param name="args">Information about the threat being detected</param>
        public delegate void ThreatDetectedHandler(ScanController sender, ThreatDetectedArgs args);

        /// <summary>
        /// Event triggered when a threat is detected during the scan process. 
        /// </summary>
        public event ThreatDetectedHandler ThreatDetected;

        /// <summary>
        /// Triggers when the scan has completed. 
        /// </summary>
        /// <param name="sender">The scanner that was running.</param>
        public delegate void ThreatScanCompleteHandler(ScanController sender);
        /// <summary>
        /// Triggers when the threat scan has completed 
        /// </summary>
        public event ThreatScanCompleteHandler ThreatScanComplete; 
    }


    /// <summary>
    /// Information to be included with detection events 
    /// </summary>
    public class ThreatDetectedArgs
    {
        /// <summary>
        /// The file location of the detected threat
        /// </summary>
        public string FilePath { get; set; }

        /// <summary>
        /// The matching signature to the detection 
        /// </summary>
        public Signature Detection { get; set; }
    }

}
